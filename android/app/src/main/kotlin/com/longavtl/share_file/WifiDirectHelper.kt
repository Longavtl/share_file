package com.longavtl.share_file

import android.content.Context
import android.location.LocationManager
import android.net.wifi.p2p.WifiP2pManager
import android.os.Handler
import android.os.Looper
import android.util.Log
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel

class WifiDirectHelper(private val context: Context) : MethodChannel.MethodCallHandler {
    private var manager: WifiP2pManager? = null
    private var channel: WifiP2pManager.Channel? = null

    init {
        manager = context.getSystemService(Context.WIFI_P2P_SERVICE) as WifiP2pManager
        channel = manager?.initialize(context, context.mainLooper, null)
    }

    override fun onMethodCall(call: MethodCall, result: MethodChannel.Result) {
        when (call.method) {
            "discoverPeers" -> discoverPeers(result)
            else -> result.notImplemented()
        }
    }

    fun discoverPeers(result: MethodChannel.Result) {
        if (!isLocationEnabled()) {
            result.error("LOCATION_DISABLED", "üìç Vui l√≤ng b·∫≠t v·ªã tr√≠ (GPS) ƒë·ªÉ ti·∫øp t·ª•c.", null)
            return
        }

        if (manager == null || channel == null) {
            result.error("INITIALIZATION_FAILED", "‚ö†Ô∏è WifiP2pManager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.", null)
            return
        }

        // Reset t√¨m ki·∫øm tr∆∞·ªõc ƒë√≥
        manager?.stopPeerDiscovery(channel, object : WifiP2pManager.ActionListener {
            override fun onSuccess() {
                Log.d("WiFiDirect", "üîÑ Reset t√¨m ki·∫øm th√†nh c√¥ng.")
                startDiscovery(result)
            }

            override fun onFailure(reason: Int) {
                Log.e("WiFiDirect", "‚ùå Kh√¥ng th·ªÉ reset t√¨m ki·∫øm: $reason")
                startDiscovery(result)
            }
        })
    }

    private fun startDiscovery(result: MethodChannel.Result) {
        manager?.discoverPeers(channel, object : WifiP2pManager.ActionListener {
            override fun onSuccess() {
                Log.d("WiFiDirect", "üü¢ ƒêang t√¨m ki·∫øm thi·∫øt b·ªã...")
                Handler(Looper.getMainLooper()).postDelayed({
                    manager?.requestPeers(channel) { peers ->
                        val deviceNames = peers.deviceList.map { it.deviceName }
                        Log.d("WiFiDirect", "üîç Thi·∫øt b·ªã t√¨m th·∫•y: $deviceNames")
                        result.success(deviceNames)
                    }
                }, 2000)
            }

            override fun onFailure(reason: Int) {
                Log.e("WiFiDirect", "üî¥ T√¨m thi·∫øt b·ªã th·∫•t b·∫°i: $reason")
                val errorMessage = when (reason) {
                    WifiP2pManager.P2P_UNSUPPORTED -> "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ Wi-Fi Direct"
                    WifiP2pManager.BUSY -> "H·ªá th·ªëng b·∫≠n, th·ª≠ l·∫°i sau"
                    WifiP2pManager.ERROR -> "L·ªói kh√¥ng x√°c ƒë·ªãnh (ERROR 0). Th·ª≠ kh·ªüi ƒë·ªông l·∫°i thi·∫øt b·ªã."
                    else -> "L·ªói kh√¥ng r√µ: $reason"
                }
                result.error("DISCOVERY_FAILED", errorMessage, null)
            }
        })
    }

    private fun isLocationEnabled(): Boolean {
        val locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager
        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) ||
                locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)
    }
}
